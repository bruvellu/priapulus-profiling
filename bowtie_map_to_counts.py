#!/usr/bin/env python
import sys
from collections import defaultdict


Usage = """
From: "Helm et al. - Characterization of differential transcript abundance
through time during Nematostella vectensis development"

This program takes a sam file generated by bowtie2, and writes out the number
of reads that map to each reference sequence. Reads that map to more than one
reference are not counted at all. If a read maps more than once to the same
reference sequence, it is only counted once.

Usage:

bowtie_map_to_counts.py bowtie.sam > bowtie.counts

BCV diff:
    - Switched to startswith function when reading lines.
    - Soft tabs.
    - Adjusted descriptive comments.
    - Removed unused n object.
"""

if len(sys.argv) < 2:
    print Usage
else:
    map_name = sys.argv[1]

    # Dictionary key is read and value is set of genes that this read maps to.
    map = defaultdict(set)
    map_handle = open(map_name, "rU")

    # Loop over lines and map all references each read hits.
    for line in map_handle:
        if not line.startswith('@'):
            line = line.strip()
            fields = line.split('\t')
            if len(fields) < 3:
                raise ValueError("Read is poorly formed:\n {1}".format(line))
            read = fields[0]
            ref = fields[2]
            map[read].add(ref)

    # Dictionary key is reference and value is number of reads mapping to it.
    counts = defaultdict(int)

    # Go through the read map and convert to counts for each reference.
    for key, hits in map.iteritems():
        # Check to see if the read mapped uniquely, if not skip it.
        if len(hits) > 1:
            continue

        ref = list(hits)[0]
        counts[ref] = counts[ref] + 1

    # Print out the results.
    print "reference\tcount"
    for ref, count in counts.iteritems():
        print ref + "\t" + str(count)
